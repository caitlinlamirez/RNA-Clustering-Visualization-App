/**
 * Plugin Client to latch into the S3 Lifecycle and communicate with the S3 Application Core
 */
/**
 * The interface for Plugins to communicate with SAGE3.
 * Plugins are contained with in iFrames and we use the `window` messaging system to communciate.
 */
export class SAGE3Plugin {
    constructor() {
        // The state of the plugin
        this.state = null;
        // The subscriptions to the state.
        this.updateSubs = {};
        window.addEventListener('message', (event) => {
            const message = event.data;
            if (message.type === 'init') {
                this.init(message.state, message.user);
            }
            else if (message.type === 'update') {
                this.updateFromSAGE3(message.state);
                this.publishToSubscriptions(message.state);
            }
        });
    }
    // Initialize the state at start up with the SAGE3 main process.
    init(state, user) {
        console.log('SAGE3Plugin> Initalizing Communication with IFrame', user);
        this.state = state;
        // this.updateFromSAGE3(state); // seems redundant
        this.publishToSubscriptions(this.state, user);
    }
    // Update the state.
    updateFromSAGE3(newState) {
        const updatedState = Object.assign(Object.assign({}, this.state), newState);
        this.state = updatedState;
        this.publishToSubscriptions(updatedState);
    }
    publishToSubscriptions(state, user = '') {
        Object.keys(this.updateSubs).forEach((id) => {
            this.updateSubs[id](state, user);
        });
    }
    /**
     * Subscribe to updates from the SAGE3 Main Process.
     * @param updateCallback Call back which will provide the new state updates from the SAGE3 main process.
     */
    subscribeToUpdates(updateCallback) {
        const id = Math.floor(Math.random() * 1000).toString();
        this.updateSubs[id] = updateCallback;
    }
    /**
     * Send an update to the SAGE3 Main Process
     * @param newState The new state to send to the SAGE3 Main process. Will be populated out to all clients.
     * @returns
     */
    update(newState) {
        if (!this.state) {
            console.log('SAGE3Plugin> ERROR: App has not been initizalized yet.');
            return;
        }
        // Will post messages to the main process
        console.log('SAGE3Plugin> Sending Update To Main Process');
        window.parent.postMessage({ source: 's3plugin', type: 'update', id: this.state._id, state: newState });
    }
}
//# sourceMappingURL=sageplugin.js.map